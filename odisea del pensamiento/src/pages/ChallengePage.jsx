import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { useGame } from '../../contexts/GameContext';
import { 
  ArrowLeft, 
  Clock, 
  Star, 
  CheckCircle, 
  Brain,
  Users,
  Heart,
  Lightbulb,
  MessageCircle,
  Award,
  Sparkles,
  Trophy,
  Zap,
  Target,
  Flame
} from 'lucide-react';
import confetti from 'canvas-confetti';
import { motion, AnimatePresence } from 'framer-motion';

const ChallengePage = () => {
  const { challengeId } = useParams();
  const navigate = useNavigate();
  const { userProfile } = useAuth();
  const { gameData, completeActivity } = useGame();
  const [completed, setCompleted] = useState(false);
  const [challenge, setChallenge] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selectedOption, setSelectedOption] = useState(null);
  const [reflection, setReflection] = useState('');
  const [showFeedback, setShowFeedback] = useState(false);
  
  // Variables para el contador de palabras
  const minWordCount = 50;
  const wordCount = reflection.trim() ? reflection.trim().split(/\s+/).length : 0;
  const wordCountProgress = Math.min(100, (wordCount / minWordCount) * 100);

  // Simulaci√≥n de carga del desaf√≠o desde la base de datos
  useEffect(() => {
    // En una implementaci√≥n real, aqu√≠ se cargar√≠an los datos del desaf√≠o desde Firebase
    const loadChallenge = () => {
      setLoading(true);
      
      // Ejemplos de desaf√≠os
      const challengesData = {
        'daily_reflection': {
          id: 'daily_reflection',
          title: 'Diario de Reflexi√≥n',
          type: 'reflection',
          category: 'lifeSkills',
          icon: 'üßò',
          estimatedTime: 10,
          xpReward: 15,
          badgeId: 'mindfulness_guru',
          description: 'Desarrolla el h√°bito de la reflexi√≥n diaria para conectar la filosof√≠a con tu vida cotidiana.',
          instructions: 'Escribe una reflexi√≥n sobre c√≥mo un concepto filos√≥fico que hayas aprendido se aplica a una situaci√≥n de tu vida diaria.',
          prompts: [
            '¬øQu√© situaci√≥n de tu vida cotidiana te ha hecho pensar en un concepto filos√≥fico?',
            '¬øC√≥mo cambi√≥ tu perspectiva despu√©s de aplicar este concepto?',
            '¬øQu√© acciones concretas puedes tomar bas√°ndote en esta reflexi√≥n?'
          ],
          tips: [
            'S√© espec√≠fico sobre la situaci√≥n',
            'Conecta claramente con el concepto filos√≥fico',
            'Reflexiona sobre c√≥mo esto cambia tu forma de pensar'
          ],
          categoryIcon: <Brain className="h-5 w-5" />
        },
        'logical_fallacies': {
          id: 'logical_fallacies',
          title: 'Detector de Falacias',
          type: 'challenge',
          category: 'criticalThinking',
          icon: 'üîç',
          estimatedTime: 20,
          xpReward: 25,
          badgeId: 'critical_thinker',
          description: 'Aprende a identificar falacias l√≥gicas en argumentos cotidianos para mejorar tu pensamiento cr√≠tico.',
          instructions: 'Identifica las falacias l√≥gicas en los siguientes argumentos y explica por qu√© son err√≥neos.',
          examples: [
            {
              argument: 'Si permitimos el matrimonio entre personas del mismo sexo, pronto la gente querr√° casarse con animales.',
              fallacy: 'Pendiente resbaladiza',
              explanation: 'Asume incorrectamente que un cambio llevar√° inevitablemente a una cadena de eventos indeseables sin evidencia.'
            },
            {
              argument: 'Mi profesor dice que este libro es excelente, as√≠ que debe serlo.',
              fallacy: 'Apelaci√≥n a la autoridad',
              explanation: 'Acepta algo como verdadero solo porque una figura de autoridad lo afirma, sin evaluar el m√©rito del argumento.'
            }
          ],
          task: 'Encuentra al menos dos ejemplos de falacias l√≥gicas en medios de comunicaci√≥n, redes sociales o conversaciones. Identifica qu√© tipo de falacia es y explica por qu√© es problem√°tica.',
          categoryIcon: <Lightbulb className="h-5 w-5" />
        },
        'philosophical_debate': {
          id: 'philosophical_debate',
          title: 'Debate Filos√≥fico',
          type: 'debate',
          category: 'social',
          icon: 'üó£Ô∏è',
          estimatedTime: 45,
          xpReward: 35,
          badgeId: 'debate_champion',
          description: 'Desarrolla habilidades de argumentaci√≥n y di√°logo respetuoso a trav√©s del debate filos√≥fico.',
          instructions: 'Organiza un mini-debate con compa√±eros sobre un tema filos√≥fico y practica la argumentaci√≥n respetuosa.',
          debateTopics: [
            '¬øEs la felicidad o el conocimiento el fin √∫ltimo de la vida humana?',
            '¬øExiste el libre albedr√≠o o nuestras acciones est√°n determinadas?',
            '¬øTienen los animales derechos morales similares a los humanos?'
          ],
          debateRules: [
            'Cada participante tiene 2 minutos para presentar su argumento inicial',
            'Escucha activamente sin interrumpir',
            'Critica ideas, no personas',
            'Busca puntos en com√∫n, no solo diferencias'
          ],
          reflection: 'Despu√©s del debate, reflexiona sobre: ¬øQu√© aprendiste de las perspectivas de los dem√°s? ¬øCambi√≥ tu opini√≥n en alg√∫n aspecto? ¬øQu√© habilidades de comunicaci√≥n necesitas mejorar?',
          categoryIcon: <Users className="h-5 w-5" />
        },
        'empathy_exercise': {
          id: 'empathy_exercise',
          title: 'Ejercicio de Empat√≠a',
          type: 'empathy_challenge',
          category: 'emotional',
          icon: '‚ù§Ô∏è',
          estimatedTime: 20,
          xpReward: 20,
          badgeId: 'empathy_master',
          description: 'Desarrolla tu inteligencia emocional aprendiendo a ver situaciones desde m√∫ltiples perspectivas.',
          instructions: 'Analiza una situaci√≥n de conflicto desde diferentes puntos de vista para desarrollar empat√≠a.',
          scenario: 'Un estudiante acusa a otro de copiar su trabajo. El acusado niega haberlo hecho, pero hay similitudes en ambos trabajos.',
          perspectives: [
            'El estudiante que hace la acusaci√≥n',
            'El estudiante acusado',
            'Un amigo com√∫n de ambos',
            'El profesor que debe resolver la situaci√≥n'
          ],
          task: 'Escribe un breve p√°rrafo desde cada una de estas perspectivas, considerando sus emociones, motivaciones y preocupaciones.',
          reflection: '¬øQu√© aprendiste al ponerte en el lugar de cada persona? ¬øC√≥mo cambi√≥ tu comprensi√≥n de la situaci√≥n? ¬øC√≥mo podr√≠as aplicar esto en tus propios conflictos?',
          categoryIcon: <Heart className="h-5 w-5" />
        }
      };
      
      // Buscar el desaf√≠o por ID
      if (challengesData[challengeId]) {
        setChallenge(challengesData[challengeId]);
      } else {
        // Desaf√≠o no encontrado, usar uno por defecto
        setChallenge(challengesData['daily_reflection']);
      }
      
      setLoading(false);
    };
    
    loadChallenge();
  }, [challengeId]);

  // Referencia para el efecto de confeti
  const confettiRef = useRef(null);
  
  // Eliminar definiciones duplicadas de las variables de contador de palabras
  
  const handleSubmit = () => {
    if (reflection.trim() && wordCount >= minWordCount) {
      // Lanzar confeti
      const launchConfetti = () => {
        const duration = 3 * 1000;
        const animationEnd = Date.now() + duration;
        const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

        const randomInRange = (min, max) => Math.random() * (max - min) + min;

        const interval = setInterval(() => {
          const timeLeft = animationEnd - Date.now();

          if (timeLeft <= 0) {
            return clearInterval(interval);
          }

          const particleCount = 50 * (timeLeft / duration);
          
          // Lanzar confeti desde ambos lados
          confetti({
            ...defaults,
            particleCount,
            origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }
          });
          confetti({
            ...defaults,
            particleCount,
            origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }
          });
        }, 250);
      };

      // Mostrar retroalimentaci√≥n con animaci√≥n
      setShowFeedback(true);
      setCompleted(true);
      
      // Lanzar confeti despu√©s de un breve retraso
      setTimeout(() => {
        launchConfetti();
      }, 500);
      
      // En una implementaci√≥n real, aqu√≠ se guardar√≠a el progreso
      // completeActivity(challenge.id, challenge.type, { score: 100 });
    }
  };

  const handleComplete = () => {
    // Aqu√≠ se guardar√≠a el progreso y se otorgar√≠an puntos XP
    navigate('/challenges');
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-mystical flex items-center justify-center">
        <div className="text-white text-center">
          <div className="animate-spin h-12 w-12 border-4 border-gold border-t-transparent rounded-full mx-auto mb-4"></div>
          <p>Cargando desaf√≠o...</p>
        </div>
      </div>
    );
  }

  if (!challenge) {
    return (
      <div className="min-h-screen bg-gradient-mystical flex items-center justify-center">
        <div className="text-white text-center">
          <p>Desaf√≠o no encontrado</p>
          <button 
            onClick={() => navigate('/challenges')}
            className="mt-4 bg-gradient-gold text-deep-blue px-6 py-2 rounded-lg font-semibold hover:scale-105 transition-transform"
          >
            Volver a Desaf√≠os
          </button>
        </div>
      </div>
    );
  }

  if (showFeedback) {
    return (
      <div className="min-h-screen bg-gradient-mystical">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Header */}
          <div className="mb-8">
            <button 
              onClick={() => navigate('/challenges')}
              className="text-white hover:text-gold transition-colors inline-flex items-center space-x-2 mb-4"
            >
              <ArrowLeft className="h-5 w-5" />
              <span>Volver a Desaf√≠os</span>
            </button>
          </div>

          {/* Feedback */}
          <div className="bg-white/95 backdrop-blur-sm rounded-2xl p-8 parchment-texture shadow-2xl">
            <AnimatePresence>
              <motion.div 
                initial={{ opacity: 0, y: 50 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -50 }}
                transition={{ duration: 0.5 }}
              >
                <div className="text-center mb-8">
                  <motion.div 
                    initial={{ scale: 0.8 }}
                    animate={{ scale: 1 }}
                    transition={{ 
                      type: "spring", 
                      stiffness: 260, 
                      damping: 20,
                      delay: 0.3 
                    }}
                    className="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4"
                  >
                    <CheckCircle className="h-8 w-8 text-green-600" />
                  </motion.div>
                  <motion.h1 
                    initial={{ y: -20 }}
                    animate={{ y: 0 }}
                    className="text-3xl font-cinzel text-deep-blue mb-2"
                  >
                    ¬°Desaf√≠o Completado!
                  </motion.h1>
                  <motion.p 
                    initial={{ scale: 0.9 }}
                    animate={{ scale: 1 }}
                    transition={{ delay: 0.2 }}
                    className="text-gray-600 font-playfair"
                  >
                    Has ganado {challenge.xpReward} puntos XP
                  </motion.p>
                </div>

                {/* Retroalimentaci√≥n */}
                <motion.div 
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.4 }}
                  className="bg-gradient-to-r from-gold/20 to-gold/10 rounded-lg p-6 border border-gold/30 mb-6"
                >
                  <h3 className="text-xl font-playfair text-deep-blue mb-4">
                    Reflexi√≥n sobre el Desaf√≠o
                  </h3>
                  
                  <div className="space-y-3">
                    <p className="text-gray-700">
                      Has completado con √©xito el desaf√≠o "{challenge.title}". Este tipo de ejercicios te ayuda a desarrollar habilidades importantes para la vida:
                    </p>
                    <ul className="list-disc pl-5 text-gray-700 space-y-2">
                      {challenge.category === 'lifeSkills' && (
                        <>
                          <motion.li 
                            initial={{ x: -10, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ delay: 0.5 }}
                          >
                            <strong>Autoconciencia:</strong> La reflexi√≥n diaria te ayuda a comprender mejor tus pensamientos y acciones.
                          </motion.li>
                          <motion.li 
                            initial={{ x: -10, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ delay: 0.6 }}
                          >
                            <strong>Pensamiento aplicado:</strong> Has practicado c√≥mo aplicar conceptos filos√≥ficos a situaciones reales.
                          </motion.li>
                          <motion.li 
                            initial={{ x: -10, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ delay: 0.7 }}
                          >
                            <strong>H√°bitos de reflexi√≥n:</strong> Est√°s desarrollando una pr√°ctica valiosa para el crecimiento personal continuo.
                          </motion.li>
                        </>
                      )}
                      {challenge.category === 'criticalThinking' && (
                        <>
                          <motion.li 
                            initial={{ x: -10, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ delay: 0.5 }}
                          >
                            <strong>An√°lisis cr√≠tico:</strong> Has aprendido a identificar errores en el razonamiento.
                          </motion.li>
                          <motion.li 
                            initial={{ x: -10, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ delay: 0.6 }}
                          >
                            <strong>Evaluaci√≥n de argumentos:</strong> Puedes distinguir entre argumentos s√≥lidos y falacias.
                          </motion.li>
                          <motion.li 
                            initial={{ x: -10, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ delay: 0.7 }}
                          >
                            <strong>Pensamiento independiente:</strong> Est√°s desarrollando la capacidad de evaluar informaci√≥n por ti mismo.
                          </motion.li>
                        </>
                      )}
                      {challenge.category === 'social' && (
                        <>
                          <motion.li 
                            initial={{ x: -10, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ delay: 0.5 }}
                          >
                            <strong>Comunicaci√≥n efectiva:</strong> Has practicado expresar ideas complejas de manera clara.
                          </motion.li>
                          <motion.li 
                            initial={{ x: -10, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ delay: 0.6 }}
                          >
                            <strong>Escucha activa:</strong> Has aprendido a considerar perspectivas diferentes a la tuya.
                          </motion.li>
                          <motion.li 
                            initial={{ x: -10, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ delay: 0.7 }}
                          >
                            <strong>Argumentaci√≥n respetuosa:</strong> Puedes defender tus ideas respetando a los dem√°s.
                          </motion.li>
                        </>
                      )}
                      {challenge.category === 'emotional' && (
                        <>
                          <motion.li 
                            initial={{ x: -10, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ delay: 0.5 }}
                          >
                            <strong>Empat√≠a:</strong> Has practicado ponerte en el lugar de otras personas.
                          </motion.li>
                          <motion.li 
                            initial={{ x: -10, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ delay: 0.6 }}
                          >
                            <strong>Inteligencia emocional:</strong> Est√°s desarrollando la capacidad de reconocer y comprender emociones.
                          </motion.li>
                          <motion.li 
                            initial={{ x: -10, opacity: 0 }}
                            animate={{ x: 0, opacity: 1 }}
                            transition={{ delay: 0.7 }}
                          >
                            <strong>Resoluci√≥n de conflictos:</strong> Has aprendido a ver situaciones desde m√∫ltiples √°ngulos.
                          </motion.li>
                        </>
                      )}
                    </ul>
                  </div>
                </motion.div>

                {/* Tu reflexi√≥n */}
                <motion.div 
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.6 }}
                  className="bg-blue-50 rounded-lg p-6 border border-blue-200 mb-6"
                >
                  <h3 className="text-lg font-playfair text-deep-blue mb-3">
                    Tu Reflexi√≥n
                  </h3>
                  <p className="text-gray-700 italic">
                    "{reflection}"
                  </p>
                </motion.div>

                {/* Pregunta de seguimiento */}
                <motion.div 
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.7 }}
                  className="bg-purple-50 rounded-lg p-6 border border-purple-200 mb-8"
                >
                  <h3 className="text-lg font-playfair text-deep-blue mb-3">
                    Para Seguir Creciendo
                  </h3>
                  <p className="text-gray-700">
                    ¬øC√≥mo podr√≠as aplicar lo que has aprendido en este desaf√≠o en otras √°reas de tu vida? 
                    Considera establecer un peque√±o objetivo para practicar esta habilidad durante la pr√≥xima semana.
                  </p>
                </motion.div>

                {/* Botones de acci√≥n */}
                <motion.div 
                  initial={{ y: 20, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  transition={{ delay: 0.8 }}
                  className="flex flex-col sm:flex-row gap-4 justify-center"
                >
                  <motion.button 
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={handleComplete}
                    className="bg-gradient-gold text-deep-blue px-8 py-3 rounded-lg font-semibold hover:scale-105 transition-transform"
                  >
                    <Sparkles className="inline-block mr-2 h-5 w-5" /> Explorar M√°s Desaf√≠os
                  </motion.button>
                  <motion.button 
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    className="bg-white border-2 border-deep-blue text-deep-blue px-8 py-3 rounded-lg font-semibold hover:bg-deep-blue hover:text-white transition-colors"
                  >
                    <Award className="inline-block mr-2 h-5 w-5" /> Compartir Logro
                  </motion.button>
                </motion.div>
              </motion.div>
            </AnimatePresence>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-mystical">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <button 
            onClick={() => navigate('/challenges')}
            className="text-white hover:text-gold transition-colors inline-flex items-center space-x-2 mb-4"
          >
            <ArrowLeft className="h-5 w-5" />
            <span>Volver a Desaf√≠os</span>
          </button>
          
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-gold/30">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-cinzel text-white mb-1">
                  {challenge.title}
                </h1>
                <p className="text-gold/80 text-sm flex items-center">
                  <span className="mr-2">{challenge.icon}</span>
                  <span className="mr-2">{challenge.category === 'lifeSkills' ? 'Habilidades para la Vida' : 
                         challenge.category === 'criticalThinking' ? 'Pensamiento Cr√≠tico' : 
                         challenge.category === 'social' ? 'Socializaci√≥n' : 
                         'Inteligencia Emocional'}</span>
                  ‚Ä¢ {challenge.estimatedTime} minutos ‚Ä¢ {challenge.xpReward} XP
                </p>
              </div>
              <div className="flex items-center space-x-4 text-white/70">
                <div className="flex items-center space-x-1">
                  <Clock className="h-4 w-4" />
                  <span className="text-sm">{challenge.estimatedTime} min</span>
                </div>
                <div className="flex items-center space-x-1">
                  <Star className="h-4 w-4" />
                  <span className="text-sm">{challenge.xpReward} XP</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Contenido del desaf√≠o */}
        <div className="bg-white/95 backdrop-blur-sm rounded-2xl p-8 parchment-texture shadow-2xl">
          {/* Introducci√≥n */}
          <div className="mb-8">
            <div className="flex items-center justify-center mb-6">
              <div className="bg-gradient-to-br from-deep-blue to-deep-blue/80 p-4 rounded-full text-white">
                {challenge.categoryIcon}
              </div>
            </div>
            <h2 className="text-2xl font-playfair text-deep-blue mb-4 text-center">
              {challenge.title}
            </h2>
            <p className="text-gray-600 text-center mb-6">
              {challenge.description}
            </p>
          </div>

          {/* Instrucciones */}
          <div className="bg-gradient-to-r from-blue/20 to-blue/10 rounded-lg p-6 border border-blue/30 mb-8">
            <h3 className="text-lg font-playfair text-deep-blue mb-3">
              Instrucciones
            </h3>
            <p className="text-gray-700 leading-relaxed mb-4">
              {challenge.instructions}
            </p>

            {/* Contenido espec√≠fico seg√∫n el tipo de desaf√≠o */}
            {challenge.type === 'reflection' && (
              <div className="mt-4 space-y-4">
                <h4 className="font-medium text-deep-blue">Preguntas para guiar tu reflexi√≥n:</h4>
                <ul className="list-disc pl-5 text-gray-700 space-y-2">
                  {challenge.prompts.map((prompt, index) => (
                    <li key={index}>{prompt}</li>
                  ))}
                </ul>
                
                {/* √Årea de reflexi√≥n con contador de palabras */}
                <div className="mt-6">
                  <div className="flex justify-between items-center mb-2">
                    <h4 className="font-medium text-deep-blue">Tu reflexi√≥n:</h4>
                    <div className="flex items-center space-x-2">
                      <span className={`text-sm ${wordCount >= minWordCount ? 'text-green-600' : 'text-gray-600'}`}>
                        {wordCount}/{minWordCount} palabras
                      </span>
                      {wordCount >= minWordCount && (
                        <motion.div
                          initial={{ scale: 0 }}
                          animate={{ scale: 1 }}
                          transition={{ type: "spring", stiffness: 500, damping: 15 }}
                        >
                          <CheckCircle className="h-4 w-4 text-green-600" />
                        </motion.div>
                      )}
                    </div>
                  </div>
                  
                  {/* Barra de progreso */}
                  <div className="h-2 w-full bg-gray-200 rounded-full mb-3 overflow-hidden">
                    <motion.div 
                      className="h-full bg-gradient-to-r from-blue-400 to-purple-500"
                      initial={{ width: 0 }}
                      animate={{ width: `${wordCountProgress}%` }}
                      transition={{ type: "spring", stiffness: 100, damping: 15 }}
                    />
                  </div>
                  
                  <textarea
                    value={reflection}
                    onChange={(e) => setReflection(e.target.value)}
                    placeholder="Escribe tu reflexi√≥n aqu√≠..."
                    className="w-full h-40 p-4 border border-blue/30 rounded-lg focus:ring-2 focus:ring-blue/50 focus:border-blue/50 transition-all"
                    required
                  />
                  
                  <div className="mt-4 flex justify-end">
                    <motion.button
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={handleSubmit}
                      disabled={wordCount < minWordCount}
                      className={`px-6 py-2 rounded-lg font-medium flex items-center space-x-2 ${wordCount >= minWordCount ? 'bg-gradient-gold text-deep-blue' : 'bg-gray-300 text-gray-600 cursor-not-allowed'}`}
                    >
                      <span>Enviar reflexi√≥n</span>
                      {wordCount >= minWordCount && <Sparkles className="h-4 w-4" />}
                    </motion.button>
                  </div>
                </div>
              </div>
            )}

            {challenge.type === 'challenge' && (
              <div className="mt-4 space-y-4">
                <h4 className="font-medium text-deep-blue">Ejemplos de falacias l√≥gicas:</h4>
                <div className="space-y-3">
                  {challenge.examples.map((example, index) => (
                    <div key={index} className="bg-white/80 p-4 rounded-lg">
                      <p className="italic mb-2">